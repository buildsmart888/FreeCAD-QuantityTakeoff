name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PySide2
    
    - name: Test imports
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, '.')
        try:
            from utils.calculations import QTOCalculator
            print('✅ QTOCalculator import successful')
        except ImportError as e:
            print(f'❌ Import failed: {e}')
            sys.exit(1)
        "
    
    - name: Validate module structure
      run: |
        python -c "
        import os
        required_files = [
            'Init.py',
            'InitGui.py', 
            'QTOWorkbench.py',
            'dialogs/main_dialog.py',
            'dialogs/object_info_dialog.py',
            'utils/calculations.py'
        ]
        
        for file in required_files:
            if not os.path.exists(file):
                print(f'❌ Required file missing: {file}')
                exit(1)
            else:
                print(f'✅ Found: {file}')
        
        print('✅ All required files present')
        "

  release:
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
